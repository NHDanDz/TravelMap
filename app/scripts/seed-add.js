const { Pool } = require('pg');
require('dotenv').config({ path: '.env.local' });

// K·∫øt n·ªëi PostgreSQL
const pool = new Pool({
  connectionString: process.env.POSTGRES_URL,
});

// D·ªØ li·ªáu m·∫´u m·ªü r·ªông
const landslides = [
  {
    id: 'LS001',
    name: 'ƒê√®o H·∫£i V√¢n',
    coordinates: { lat: 16.2185, lng: 108.1155 },
    detectedAt: '2025-02-15T08:30:00',
    status: 'high_risk',
    details: {
      affectedArea: '2.35 km¬≤',
      potentialImpact: 'ƒê∆∞·ªùng Qu·ªëc l·ªô 1A',
      lastUpdate: '2025-03-30T14:22:00'
    },
    history: [
      { date: '2025-02-15', status: 'detected', note: 'Ph√°t hi·ªán ban ƒë·∫ßu' },
      { date: '2025-02-20', status: 'field_verified', note: 'X√°c minh t·∫°i hi·ªán tr∆∞·ªùng' },
      { date: '2025-03-15', status: 'monitored', note: 'TƒÉng di·ªán t√≠ch ·∫£nh h∆∞·ªüng 15%' }
    ]
  },
  {
    id: 'LS002',
    name: 'Th√°c B·∫°c, Sa Pa',
    coordinates: { lat: 22.3545, lng: 103.7778 },
    detectedAt: '2025-03-10T11:45:00',
    status: 'active',
    details: {
      affectedArea: '1.15 km¬≤',
      potentialImpact: 'Khu du l·ªãch Th√°c B·∫°c',
      lastUpdate: '2025-03-28T09:10:00'
    },
    history: [
      { date: '2025-03-10', status: 'detected', note: 'Ph√°t hi·ªán ban ƒë·∫ßu' },
      { date: '2025-03-15', status: 'field_verified', note: 'X√°c minh t·∫°i hi·ªán tr∆∞·ªùng' }
    ]
  },
  // D·ªØ li·ªáu m·ªõi th√™m v√†o
  {
    id: 'LS003',
    name: 'ƒê√®o √î Qu√Ω H·ªì',
    coordinates: { lat: 22.3476, lng: 103.7692 },
    detectedAt: '2025-03-25T14:30:00',
    status: 'high_risk',
    details: {
      affectedArea: '1.78 km¬≤',
      potentialImpact: 'ƒê∆∞·ªùng t·ªânh l·ªô 4D',
      lastUpdate: '2025-03-31T10:15:00'
    },
    history: [
      { date: '2025-03-25', status: 'detected', note: 'Ph√°t hi·ªán qua ·∫£nh v·ªá tinh' },
      { date: '2025-03-29', status: 'field_verified', note: 'X√°c minh t·∫°i hi·ªán tr∆∞·ªùng - nguy c∆° cao' }
    ]
  },
  {
    id: 'LS004',
    name: 'Thung l≈©ng Mai Ch√¢u',
    coordinates: { lat: 20.6634, lng: 104.9964 },
    detectedAt: '2025-01-05T09:15:00',
    status: 'stabilized',
    details: {
      affectedArea: '0.75 km¬≤',
      potentialImpact: 'Khu d√¢n c∆∞ g·∫ßn ƒë·ªìi',
      lastUpdate: '2025-03-20T16:45:00'
    },
    history: [
      { date: '2025-01-05', status: 'detected', note: 'Ph√°t hi·ªán qua ·∫£nh v·ªá tinh' },
      { date: '2025-01-10', status: 'field_verified', note: 'X√°c minh t·∫°i hi·ªán tr∆∞·ªùng' },
      { date: '2025-02-15', status: 'remediation', note: '√Åp d·ª•ng bi·ªán ph√°p gia c·ªë' },
      { date: '2025-03-20', status: 'stabilized', note: 'ƒê√£ ·ªïn ƒë·ªãnh sau c√°c bi·ªán ph√°p x·ª≠ l√Ω' }
    ]
  },
  {
    id: 'LS005',
    name: 'ƒê√®o Ngang',
    coordinates: { lat: 18.0676, lng: 106.0225 },
    detectedAt: '2025-03-15T07:30:00',
    status: 'monitored',
    details: {
      affectedArea: '1.25 km¬≤',
      potentialImpact: 'ƒê∆∞·ªùng Qu·ªëc l·ªô 1A ƒëo·∫°n qua ƒë√®o',
      lastUpdate: '2025-03-28T11:30:00'
    },
    history: [
      { date: '2025-03-15', status: 'detected', note: 'Ph√°t hi·ªán c√°c v·∫øt n·ª©t' },
      { date: '2025-03-20', status: 'field_verified', note: 'Ki·ªÉm tra hi·ªán tr∆∞·ªùng' },
      { date: '2025-03-28', status: 'monitored', note: 'L·∫Øp ƒë·∫∑t thi·∫øt b·ªã quan tr·∫Øc' }
    ]
  }
];

const monitoredAreas = [
  {
    id: 'MON001',
    name: 'Khu v·ª±c Sa Pa',
    boundingBox: { north: 22.4, south: 22.2, east: 103.9, west: 103.6 },
    createdAt: '2025-01-10T08:00:00',
    monitorFrequency: 'daily',
    lastChecked: '2025-03-31T00:00:00',
    status: 'active',
    detectedPoints: 2,
    riskLevel: 'high'
  },
  // D·ªØ li·ªáu m·ªõi th√™m v√†o
  {
    id: 'MON002',
    name: 'Thung l≈©ng Mai Ch√¢u',
    boundingBox: { north: 20.7, south: 20.6, east: 105.1, west: 104.9 },
    createdAt: '2025-01-15T10:30:00',
    monitorFrequency: 'weekly',
    lastChecked: '2025-03-29T08:15:00',
    status: 'active',
    detectedPoints: 1,
    riskLevel: 'medium',
    landslideId: 'LS004'
  },
  {
    id: 'MON003',
    name: 'ƒê√®o Ngang v√† ph·ª• c·∫≠n',
    boundingBox: { north: 18.1, south: 18.0, east: 106.1, west: 106.0 },
    createdAt: '2025-03-16T14:20:00',
    monitorFrequency: 'daily',
    lastChecked: '2025-03-31T06:00:00',
    status: 'active',
    detectedPoints: 1,
    riskLevel: 'medium',
    landslideId: 'LS005'
  }
];

const alerts = [
  {
    id: '1',
    type: 'danger',
    title: 'C·∫£nh b√°o s·∫°t l·ªü m·ªõi',
    description: 'Ph√°t hi·ªán ƒëi·ªÉm s·∫°t l·ªü m·ªõi t·∫°i ƒê√®o √î Qu√Ω H·ªì (ID: LS003)',
    date: '2025-03-31T10:00:00',
    landslideId: 'LS003',
    read: false,
    userId: 'system'
  },
  {
    id: '2',
    type: 'warning',
    title: 'M∆∞a l·ªõn t·∫°i khu v·ª±c theo d√µi',
    description: 'D·ª± b√°o m∆∞a l·ªõn t·∫°i Sa Pa trong 24 gi·ªù t·ªõi',
    date: '2025-03-30T16:30:00',
    monitoringAreaId: 'MON001',
    read: true,
    userId: 'system'
  },
  // D·ªØ li·ªáu m·ªõi th√™m v√†o
  {
    id: '3',
    type: 'info',
    title: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i',
    description: 'ƒê√£ ·ªïn ƒë·ªãnh s·∫°t l·ªü t·∫°i Thung l≈©ng Mai Ch√¢u',
    date: '2025-03-20T16:45:00',
    landslideId: 'LS004',
    read: true,
    userId: 'system'
  },
  {
    id: '4',
    type: 'success',
    title: 'Ho√†n th√†nh l·∫Øp ƒë·∫∑t thi·∫øt b·ªã',
    description: 'H·ªá th·ªëng c·∫£m bi·∫øn ƒë√£ ƒë∆∞·ª£c l·∫Øp ƒë·∫∑t t·∫°i ƒê√®o Ngang',
    date: '2025-03-28T12:00:00',
    landslideId: 'LS005',
    read: false,
    userId: 'system'
  },
  {
    id: '5',
    type: 'danger',
    title: 'Nguy c∆° s·∫°t l·ªü cao',
    description: 'Ph√°t hi·ªán nhi·ªÅu v·∫øt n·ª©t m·ªõi t·∫°i ƒê√®o H·∫£i V√¢n, c·∫ßn ƒëi·ªÅu ph·ªëi l·ª±c l∆∞·ª£ng ki·ªÉm tra ngay',
    date: '2025-03-31T08:15:00',
    landslideId: 'LS001',
    read: false,
    userId: 'system'
  }
];

const notificationSettings = {
  email: true,
  emailAddress: 'admin@example.com',
  sms: false,
  phoneNumber: '',
  threshold: 'medium',
  updateFrequency: 'daily',
  weatherForecast: true,
  autoMonitor: false,
  monthlyReport: true,
  userId: 'default'
};

async function truncateAllTables(client) {
  // X√≥a d·ªØ li·ªáu c≈© tr∆∞·ªõc khi th√™m m·ªõi ƒë·ªÉ tr√°nh l·ªói kh√≥a ch√≠nh tr√πng l·∫∑p
  await client.query('TRUNCATE alerts, notification_settings, monitoring_areas, landslides RESTART IDENTITY CASCADE');
  console.log('üßπ ƒê√£ x√≥a d·ªØ li·ªáu c≈© t·ª´ t·∫•t c·∫£ c√°c b·∫£ng');
}

async function countRecords(client) {
  const tables = ['landslides', 'monitoring_areas', 'notification_settings', 'alerts'];
  console.log('\nüìä S·ªë l∆∞·ª£ng b·∫£n ghi sau khi import:');
  
  for (const table of tables) {
    const res = await client.query(`SELECT COUNT(*) FROM ${table}`);
    console.log(`- ${table}: ${res.rows[0].count} b·∫£n ghi`);
  }
}

async function seed() {
  console.log('üîÑ ƒêang ti·∫øn h√†nh import d·ªØ li·ªáu v√†o PostgreSQL...');
  const client = await pool.connect();

  try {
    await client.query('BEGIN');

    // X√≥a d·ªØ li·ªáu c≈©
    await truncateAllTables(client);

    // Insert landslides
    for (const landslide of landslides) {
      await client.query(
        `INSERT INTO landslides 
        (id, name, lat, lng, detected_at, status, affected_area, potential_impact, last_update, history, created_at, updated_at)
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, NOW(), NOW())`,
        [
          landslide.id,
          landslide.name,
          landslide.coordinates.lat.toString(),
          landslide.coordinates.lng.toString(),
          new Date(landslide.detectedAt),
          landslide.status,
          landslide.details.affectedArea,
          landslide.details.potentialImpact,
          new Date(landslide.details.lastUpdate),
          JSON.stringify(landslide.history)
        ]
      );
      console.log(`‚úÖ ƒê√£ th√™m ƒëi·ªÉm s·∫°t l·ªü: ${landslide.name} (${landslide.id})`);
    }

    // Insert monitoring areas
    for (const area of monitoredAreas) {
      await client.query(
        `INSERT INTO monitoring_areas 
        (id, name, north_bound, south_bound, east_bound, west_bound, created_at, monitor_frequency, last_checked, status, detected_points, risk_level, landslide_id)
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)`,
        [
          area.id,
          area.name,
          area.boundingBox.north.toString(),
          area.boundingBox.south.toString(),
          area.boundingBox.east.toString(),
          area.boundingBox.west.toString(),
          new Date(area.createdAt),
          area.monitorFrequency,
          new Date(area.lastChecked),
          area.status,
          area.detectedPoints,
          area.riskLevel,
          area.landslideId || null
        ]
      );
      console.log(`‚úÖ ƒê√£ th√™m khu v·ª±c theo d√µi: ${area.name} (${area.id})`);
    }

    // Insert notification settings
    await client.query(
      `INSERT INTO notification_settings 
      (user_id, email, email_address, sms, phone_number, threshold, update_frequency, weather_forecast, auto_monitor, monthly_report)
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)`,
      [
        notificationSettings.userId,
        notificationSettings.email,
        notificationSettings.emailAddress,
        notificationSettings.sms,
        notificationSettings.phoneNumber,
        notificationSettings.threshold,
        notificationSettings.updateFrequency,
        notificationSettings.weatherForecast,
        notificationSettings.autoMonitor,
        notificationSettings.monthlyReport
      ]
    );
    console.log('‚úÖ ƒê√£ th√™m c√†i ƒë·∫∑t th√¥ng b√°o');

    // Insert alerts
    for (const alert of alerts) {
      await client.query(
        `INSERT INTO alerts 
        (type, title, description, date, landslide_id, monitoring_area_id, read, user_id)
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8)`,
        [
          alert.type,
          alert.title,
          alert.description,
          new Date(alert.date),
          alert.landslideId || null,
          alert.monitoringAreaId || null,
          alert.read,
          alert.userId
        ]
      );
      console.log(`‚úÖ ƒê√£ th√™m c·∫£nh b√°o: ${alert.title}`);
    }

    await client.query('COMMIT');
    
    // Ki·ªÉm tra s·ªë l∆∞·ª£ng b·∫£n ghi sau khi import
    await countRecords(client);
    
    console.log('\n‚ú® Import d·ªØ li·ªáu th√†nh c√¥ng!');
    console.log('üåê B·∫°n c√≥ th·ªÉ truy c·∫≠p ·ª©ng d·ª•ng ƒë·ªÉ xem d·ªØ li·ªáu m·ªõi');

  } catch (error) {
    await client.query('ROLLBACK');
    console.error('‚ùå L·ªói khi import d·ªØ li·ªáu:', error);
  } finally {
    client.release();
    pool.end();
  }
}

// Th·ª±c hi·ªán import d·ªØ li·ªáu
seed();