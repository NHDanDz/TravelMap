const { Pool } = require('pg');
require('dotenv').config({ path: '.env.local' });

const pool = new Pool({
  connectionString: process.env.POSTGRES_URL,
});

/**
 * This script synchronizes your database schema with the schema defined in your code
 * It fixes all the column mismatches that are causing errors in your application
 */

// Main function to run the fixes
async function syncDatabaseSchema() {
  console.log('üîÑ B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô h√≥a c·∫•u tr√∫c database...');
  
  const client = await pool.connect();
  let hasErrors = false;
  
  try {
    // B·∫Øt ƒë·∫ßu transaction
    await client.query('BEGIN');
    
    // ===== 1. FIX LANDSLIDES TABLE =====
    console.log('\nüîç ƒêang ki·ªÉm tra b·∫£ng landslides...');
    
    // Check if first_detected_at exists
    const firstDetectedExists = await columnExists(client, 'landslides', 'first_detected_at');
    if (!firstDetectedExists) {
      console.log('  ‚ûï Th√™m c·ªôt first_detected_at v√†o b·∫£ng landslides');
      await client.query(`
        ALTER TABLE landslides 
        ADD COLUMN first_detected_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      `);
    }
    
    // ===== 2. FIX MONITORING_AREAS TABLE =====
    console.log('\nüîç ƒêang ki·ªÉm tra b·∫£ng monitoring_areas...');
    
    // Check if updated_at exists
    const updatedAtExists = await columnExists(client, 'monitoring_areas', 'updated_at');
    if (!updatedAtExists) {
      console.log('  ‚ûï Th√™m c·ªôt updated_at v√†o b·∫£ng monitoring_areas');
      await client.query(`
        ALTER TABLE monitoring_areas 
        ADD COLUMN updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      `);
    }
    
    // Check if landslide_count exists
    const landslideCountExists = await columnExists(client, 'monitoring_areas', 'landslide_count');
    if (!landslideCountExists) {
      console.log('  ‚ûï Th√™m c·ªôt landslide_count v√†o b·∫£ng monitoring_areas');
      await client.query(`
        ALTER TABLE monitoring_areas 
        ADD COLUMN landslide_count INTEGER DEFAULT 0
      `);
    }
    
    // ===== 3. FIX NOTIFICATION_SETTINGS TABLE =====
    console.log('\nüîç ƒêang ki·ªÉm tra b·∫£ng notification_settings...');
    
    // Check for difference between monthly_report and monthly_reports
    const monthlyReportsExists = await columnExists(client, 'notification_settings', 'monthly_reports');
    const monthlyReportExists = await columnExists(client, 'notification_settings', 'monthly_report');
    
    if (!monthlyReportsExists) {
      if (monthlyReportExists) {
        // Rename column if the singular version exists
        console.log('  üîÑ ƒê·ªïi t√™n c·ªôt monthly_report th√†nh monthly_reports');
        await client.query(`
          ALTER TABLE notification_settings 
          RENAME COLUMN monthly_report TO monthly_reports
        `);
      } else {
        // Add column if neither exists
        console.log('  ‚ûï Th√™m c·ªôt monthly_reports v√†o b·∫£ng notification_settings');
        await client.query(`
          ALTER TABLE notification_settings 
          ADD COLUMN monthly_reports BOOLEAN DEFAULT TRUE
        `);
      }
    }
    
    // Check for weekly_reports
    const weeklyReportsExists = await columnExists(client, 'notification_settings', 'weekly_reports');
    if (!weeklyReportsExists) {
      console.log('  ‚ûï Th√™m c·ªôt weekly_reports v√†o b·∫£ng notification_settings');
      await client.query(`
        ALTER TABLE notification_settings 
        ADD COLUMN weekly_reports BOOLEAN DEFAULT FALSE
      `);
    }
    
    // ===== 4. FIX ALERTS TABLE =====
    console.log('\nüîç ƒêang ki·ªÉm tra b·∫£ng alerts...');
    
    // Check for inspection_event_id
    const inspectionEventIdExists = await columnExists(client, 'alerts', 'inspection_event_id');
    if (!inspectionEventIdExists) {
      console.log('  ‚ûï Th√™m c·ªôt inspection_event_id v√†o b·∫£ng alerts');
      await client.query(`
        ALTER TABLE alerts 
        ADD COLUMN inspection_event_id TEXT
      `);
      
      // Add foreign key if the inspections_events table exists
      const inspectionEventsExists = await tableExists(client, 'inspection_events');
      if (inspectionEventsExists) {
        console.log('  üîó Th√™m kh√≥a ngo·∫°i cho inspection_event_id');
        await client.query(`
          ALTER TABLE alerts
          ADD CONSTRAINT fk_alerts_inspection_event
          FOREIGN KEY (inspection_event_id)
          REFERENCES inspection_events(id)
          ON DELETE SET NULL
        `);
      }
    }
    
    // Check for acknowledged_at
    const acknowledgedAtExists = await columnExists(client, 'alerts', 'acknowledged_at');
    if (!acknowledgedAtExists) {
      console.log('  ‚ûï Th√™m c·ªôt acknowledged_at v√†o b·∫£ng alerts');
      await client.query(`
        ALTER TABLE alerts 
        ADD COLUMN acknowledged_at TIMESTAMP WITH TIME ZONE
      `);
    }
    
    // Check for risk_level
    const alertRiskLevelExists = await columnExists(client, 'alerts', 'risk_level');
    if (!alertRiskLevelExists) {
      console.log('  ‚ûï Th√™m c·ªôt risk_level v√†o b·∫£ng alerts');
      await client.query(`
        ALTER TABLE alerts 
        ADD COLUMN risk_level VARCHAR(20)
      `);
    }
    
    // ===== 5. FIX COLUMN CASE IN ALL TABLES =====
    
    // Check for camelCase vs snake_case discrepancies in notification_settings
    console.log('\nüîç ƒêang ki·ªÉm tra v√† s·ª≠a l·ªói camelCase vs snake_case...');
    
    // Fix in notification_settings
    const camelCaseColumns = [
      { camelCase: 'emailAddress', snakeCase: 'email_address' },
      { camelCase: 'phoneNumber', snakeCase: 'phone_number' },
      { camelCase: 'updateFrequency', snakeCase: 'update_frequency' },
      { camelCase: 'weatherForecast', snakeCase: 'weather_forecast' },
      { camelCase: 'autoMonitor', snakeCase: 'auto_monitor' },
      { camelCase: 'createdAt', snakeCase: 'created_at' },
      { camelCase: 'updatedAt', snakeCase: 'updated_at' },
      { camelCase: 'userId', snakeCase: 'user_id' }
    ];
    
    for (const column of camelCaseColumns) {
      const camelExists = await columnExists(client, 'notification_settings', column.camelCase);
      const snakeExists = await columnExists(client, 'notification_settings', column.snakeCase);
      
      if (camelExists && !snakeExists) {
        console.log(`  üîÑ ƒê·ªïi t√™n c·ªôt ${column.camelCase} th√†nh ${column.snakeCase} trong b·∫£ng notification_settings`);
        await client.query(`
          ALTER TABLE notification_settings 
          RENAME COLUMN "${column.camelCase}" TO ${column.snakeCase}
        `);
      } else if (!camelExists && !snakeExists && column.snakeCase === 'user_id') {
        // Special case for user_id which might be missing
        console.log(`  ‚ûï Th√™m c·ªôt ${column.snakeCase} v√†o b·∫£ng notification_settings`);
        await client.query(`
          ALTER TABLE notification_settings 
          ADD COLUMN ${column.snakeCase} TEXT NOT NULL DEFAULT 'default'
        `);
      }
    }
    
    // Similar fixes for alerts table
    const alertsCamelCaseColumns = [
      { camelCase: 'landslideId', snakeCase: 'landslide_id' },
      { camelCase: 'monitoringAreaId', snakeCase: 'monitoring_area_id' },
      { camelCase: 'userId', snakeCase: 'user_id' },
      { camelCase: 'createdAt', snakeCase: 'created_at' }
    ];
    
    for (const column of alertsCamelCaseColumns) {
      const camelExists = await columnExists(client, 'alerts', column.camelCase);
      const snakeExists = await columnExists(client, 'alerts', column.snakeCase);
      
      if (camelExists && !snakeExists) {
        console.log(`  üîÑ ƒê·ªïi t√™n c·ªôt ${column.camelCase} th√†nh ${column.snakeCase} trong b·∫£ng alerts`);
        await client.query(`
          ALTER TABLE alerts 
          RENAME COLUMN "${column.camelCase}" TO ${column.snakeCase}
        `);
      }
    }
    
    // ===== 6. COMMIT CHANGES =====
    console.log('\n‚úÖ ƒêang l∆∞u c√°c thay ƒë·ªïi...');
    await client.query('COMMIT');
    console.log('üéâ ƒê√£ ƒë·ªìng b·ªô h√≥a c·∫•u tr√∫c database th√†nh c√¥ng!');
    
    // ===== 7. VERIFY FIXES =====
    await verifyFixes(client);
    
  } catch (error) {
    console.error('‚ùå L·ªói khi th·ª±c hi·ªán ƒë·ªìng b·ªô h√≥a:', error);
    await client.query('ROLLBACK');
    hasErrors = true;
  } finally {
    client.release();
  }
  
  return !hasErrors;
}

// Helper function to check if a column exists
async function columnExists(client, table, column) {
  const result = await client.query(`
    SELECT EXISTS (
      SELECT 1 
      FROM information_schema.columns 
      WHERE table_name = $1 
      AND column_name = $2
    ) as exists
  `, [table, column]);
  
  return result.rows[0].exists;
}

// Helper function to check if a table exists
async function tableExists(client, table) {
  const result = await client.query(`
    SELECT EXISTS (
      SELECT 1 
      FROM information_schema.tables 
      WHERE table_name = $1
    ) as exists
  `, [table]);
  
  return result.rows[0].exists;
}

// Verify all fixes have been applied
async function verifyFixes(client) {
  console.log('\nüîç Ki·ªÉm tra l·∫°i c√°c s·ª≠a ch·ªØa...');
  
  // Columns to verify across different tables
  const columnsToVerify = [
    { table: 'landslides', column: 'first_detected_at' },
    { table: 'monitoring_areas', column: 'updated_at' },
    { table: 'monitoring_areas', column: 'landslide_count' },
    { table: 'notification_settings', column: 'monthly_reports' },
    { table: 'notification_settings', column: 'weekly_reports' },
    { table: 'alerts', column: 'inspection_event_id' },
    { table: 'alerts', column: 'acknowledged_at' },
    { table: 'alerts', column: 'risk_level' }
  ];
  
  let allFixed = true;
  
  for (const {table, column} of columnsToVerify) {
    const exists = await columnExists(client, table, column);
    
    if (exists) {
      console.log(`  ‚úÖ C·ªôt ${column} ƒë√£ t·ªìn t·∫°i trong b·∫£ng ${table}`);
    } else {
      console.log(`  ‚ùå C·ªôt ${column} v·∫´n ch∆∞a t·ªìn t·∫°i trong b·∫£ng ${table}`);
      allFixed = false;
    }
  }
  
  if (allFixed) {
    console.log('\nüéØ T·∫•t c·∫£ c√°c v·∫•n ƒë·ªÅ ƒë√£ ƒë∆∞·ª£c s·ª≠a ch·ªØa th√†nh c√¥ng!');
  } else {
    console.log('\n‚ö†Ô∏è M·ªôt s·ªë v·∫•n ƒë·ªÅ v·∫´n ch∆∞a ƒë∆∞·ª£c s·ª≠a ch·ªØa, vui l√≤ng ki·ªÉm tra l·∫°i.');
  }
}

// Main execution
async function main() {
  console.log('üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh s·ª≠a ch·ªØa database...');
  
  try {
    const success = await syncDatabaseSchema();
    
    if (success) {
      console.log('\n‚ú® Qu√° tr√¨nh s·ª≠a ch·ªØa ho√†n t·∫•t th√†nh c√¥ng!');
      console.log('üî∏ ·ª®ng d·ª•ng c·ªßa b·∫°n b√¢y gi·ªù c√≥ th·ªÉ ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.');
      console.log('üî∏ C√°c l·ªói missing column s·∫Ω kh√¥ng c√≤n xu·∫•t hi·ªán n·ªØa.');
    } else {
      console.log('\n‚ö†Ô∏è Qu√° tr√¨nh s·ª≠a ch·ªØa ch∆∞a ho√†n t·∫•t, vui l√≤ng ki·ªÉm tra l·ªói ·ªü tr√™n.');
    }
  } catch (error) {
    console.error('‚ùå L·ªói kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c:', error);
  } finally {
    // ƒê√≥ng k·∫øt n·ªëi ƒë·∫øn pool
    await pool.end();
  }
}

// Ch·∫°y script
main();