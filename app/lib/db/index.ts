import { drizzle } from 'drizzle-orm/postgres-js';
import postgres from 'postgres';
import * as schema from './schema';
import { PgTable } from 'drizzle-orm/pg-core';

// T·∫°o c∆° s·ªü d·ªØ li·ªáu gi·∫£ v·ªõi m·ªôt interface ƒë∆°n gi·∫£n h∆°n
// nh∆∞ng v·∫´n ƒë·ªß ƒë·ªÉ tr·∫£ v·ªÅ gi√° tr·ªã th√≠ch h·ª£p v√† tr√°nh l·ªói TypeScript
const createMockDb = () => {
  console.warn('‚ö†Ô∏è ƒêang s·ª≠ d·ª•ng c∆° s·ªü d·ªØ li·ªáu gi·∫£. Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng POSTGRES_URL ƒë·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu th·ª±c.');
  
  // T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng gi·∫£ c√≥ c√°c ph∆∞∆°ng th·ª©c t∆∞∆°ng t·ª± v·ªõi c∆° s·ªü d·ªØ li·ªáu th·∫≠t
  const mockDb = {
    
    // ƒê·ªëi t∆∞·ª£ng select() ph·∫£i tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng c√≥ ph∆∞∆°ng th·ª©c from()
    // m√† t·ª´ ƒë√≥ c√≥ th·ªÉ g·ªçi where()
    select: (...args: any[]) => {
      const fromObj = {
        from: (table: any) => {
          // Tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng c√≥ ph∆∞∆°ng th·ª©c where() tr·∫£ v·ªÅ m·∫£ng r·ªóng
          return {
            where: () => [],
            orderBy: () => []
          };
        }
      };
      return fromObj;
    },
    
    insert: (table: any) => ({
      values: (values: any) => ({})
    }),
    
    update: (table: any) => ({
      set: (values: any) => ({
        where: () => ({})
      })
    }),
    
    delete: (table: any) => ({
      where: () => ({})
    })
  };

  return mockDb;
};

// Kh·ªüi t·∫°o db v·ªõi m·ªôt ƒë·ªëi t∆∞·ª£ng c∆° s·ªü d·ªØ li·ªáu th·∫≠t ho·∫∑c gi·∫£
let db: any;
 

try {
  if (!process.env.POSTGRES_URL) {
    db = createMockDb();
  } else {
    console.log('üîÑ ƒêang k·∫øt n·ªëi ƒë·∫øn PostgreSQL...');
    try {
      // C·∫•u h√¨nh t·ªët h∆°n cho postgres client
      const client = postgres(process.env.POSTGRES_URL, { 
        ssl: process.env.POSTGRES_URL.includes('localhost') ? false : 'require',
        idle_timeout: 20, // gi·∫£m timeout cho c√°c k·∫øt n·ªëi kh√¥ng ho·∫°t ƒë·ªông
        max_lifetime: 60 * 30, // th·ªùi gian s·ªëng t·ªëi ƒëa c·ªßa connection (30 ph√∫t)
        connect_timeout: 10, // th·ªùi gian timeout khi k·∫øt n·ªëi (10 gi√¢y)
        max: 10, // s·ªë l∆∞·ª£ng k·∫øt n·ªëi t·ªëi ƒëa trong pool
        connection: {
          application_name: 'landslide-app' // t√™n ·ª©ng d·ª•ng ƒë·ªÉ d·ªÖ theo d√µi
        }
      });
      
      db = drizzle(client, { schema });
      console.log('‚úÖ K·∫øt n·ªëi PostgreSQL th√†nh c√¥ng!');
    } catch (connectionError) {
      console.error('‚ùå L·ªói k·∫øt n·ªëi PostgreSQL:', connectionError);
      console.warn('‚ö†Ô∏è Chuy·ªÉn sang s·ª≠ d·ª•ng c∆° s·ªü d·ªØ li·ªáu gi·∫£.');
      db = createMockDb();
    }
  }
} catch (error) {
  console.error('L·ªói k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu:', error);
  db = createMockDb();
}

export { db };